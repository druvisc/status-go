syntax = "proto3";

package protobuf;

message Grant {
  bytes organisation_id = 1;
  bytes member_id = 2;
  string chat_id = 3;
  uint64 clock = 4;
}

message OrganisationMember {
}

message ChatMessageIdentity {
  // stubbing this, it's already been prepared in a different PR
  string ens_name = 1;
  string profile_picture = 2; // not a string, more complex data structure, but you get the point
  string display_name = 3;
  string description = 4; // this is actually unique to an organisation, and chatMessageIdentity might want to be updated, or similar
}

message OrganisationPermissions {
  enum Access {
    UNKNOWN_ACCESS = 0;
    NO_MEMBERSHIP = 1;
    INVITATION_ONLY = 2;
    ON_REQUEST = 3;
  }

  bool ens_only = 1;
  // https://gitlab.matrix.org/matrix-org/olm/blob/master/docs/megolm.md is a candidate for the algorithm to be used in case we want to have private organisational chats, lighter than pairwise encryption using the DR, less secure, but more efficient for large number of participants
  bool private = 2;
  Access access = 3;
}

message OrganisationDescription {
  uint64 clock = 1;
  map<string,OrganisationMember> members = 2;
  OrganisationPermissions permissions = 3;
  ChatMessageIdentity identity = 5;
  map<string,OrganisationChat> chats = 6;
}

message OrganisationChat {
  uint64 clock = 2;
  map<string,OrganisationMember> members = 3;
  OrganisationPermissions permissions = 4;
  ChatMessageIdentity identity = 5;
}

message OrganisationInvitation {
  OrganisationDescription organisation = 1;
  bytes grant = 2;
}

message OrganisationRequestJoin {
  string ens_name = 1;
  string chat_id = 2;
  bytes organisation_id = 3;
}

message OrganisationRequestJoinResponse {
  OrganisationDescription organisation = 1;
  bool accepted = 2;
  bytes grant = 3;
}
